classdef ReadDataSAR < handle
    %Извлечение данных из файла
    
    properties
        f0  %рабочая частота сигнала
        fs  %частота дискретизации
        Tr  %период повторения
        filename   %запись сигнала
        k   %константа для персчета частоты в дальность
    end
    
    methods
        function obj = ReadDataSAR
            %конструктор класса, т.е. создание объекта класса
            obj.fs = 44100; %частота дискретизации звуковой карты
            obj.Tr = 2.2e-2; %период повторения в сек
        end
        function Y = generateMatrix(obj)
            %% Считывание сырых данных измерений из записанного .wav файла
            % Y - амплитудное значение сигнала
            % FS - частота дискретизации
            % NBITS - разрядность оцифрованных данных
            [fn,ph] = uigetfile('*.wav');
            obj.filename = [ph,fn];
            
            [Y,obj.fs] = audioread(obj.filename);
                        
            tic;
            %% Определение параметров лабораторного стенда и констант
            Tp = 20E-3;             %(c)  время излучения импульса
            Trp = 0.25;             %(с)  минимальное время, между следующими угловыми положения антенны
            N = Tp*obj.fs;              %     число отсчетов на один импульс
            
            Nrp = Trp*obj.fs;           % Число отсчетов, приходчщихся на время наблюдения
            % в одном угловом направлении, не более Trp секунд
            % Na = 55;                % введено для ускорения после 1 прогона программы
            % RP = zeros(Na,Nrp);     % резервирование памяти для ускорения вычислений
            % RPtrig = zeros(Na,Nrp); % резервирование памяти для ускорения вычислений
            thresh = 0.08;          % порог обработки
            % sif = zeros(Na,N/2);    % резервирование памяти для ускорения вычислений
            
            %% Обработка сигнала
            %Предварительное инвертирование данных, из-за особенностей оцифровки сигнала
            trig = -1*Y(:,2);   % массив отсчетов синхроимпульсов
            s = -1*Y(:,1);      % массив отсчетов эхо-сигнала
            clear Y;
            
            %% Выделение областей, соотвествующих угловым положениям РСА
            % в процессе перемещения стенда РСА, данные не записываются, т.е. в канале
            % синхроимппульсов данные должны осустствовать, что исользуется для
            % селекции углового положения стенда
            
            % Формирование двумерной матрицы (строки - угловые положения; столбцы данные
            % с каждого углового положения в течение Trp секунд) из массива записанных
            % данных для последующей обработки сигнала
            
            rpstart = abs(trig)> mean(abs(trig));
            count = 0;
            ii = Nrp+1;
            while (ii <= (size(rpstart,1)-Nrp))
                %если предыдущие Nrp отсчетов нулевые (отсуствуют данные в течение Trp
                %секунд), а следующий Nrp+1 отсчет равен единице, тогда
                if (rpstart(ii) == 1) && (sum(rpstart(ii-Nrp:ii-1)) == 0)
                    %инкрементировать счетчик обнаруженных угловых положений
                    count = count + 1;
                    %сохранить Trp секунд данных с канала биений
                    RP(count,:) = s(ii:ii+Nrp-1);
                    %сохранить Trp секунд данных с канала синхроимпульсов
                    RPtrig(count,:) = trig(ii:ii+Nrp-1);
                    ii = ii+2*Nrp-1;
                else
                    ii = ii + 1;
                end
            end
            
            %% Усредение данных с каждого углового направления
            % Этап усреднения данных с каждого углового направления, отраженного
            % сигнала, на интервале Trp секунд, от Tp с данных биений
            
            clear ii;
            count = 0;
            for jj = 1:size(RP,1)
                %clear SIF;
                SIF = zeros(N,1);
                start = (RPtrig(jj,:)> thresh);
                count = 0;
                %выделение массива данных соотвествющих одному крайнему периоду
                for ii = 12:(size(start,2)-2*N)
                    [Y I] =  max(RPtrig(jj,ii:ii+2*N));
                    %если предыдущие 8 отсчетов нулевые, а индекс максимального равен
                    %1 (эквивалентно пропуску первого периода), тогда
                    if mean(start(ii-10:ii-2)) == 0 && I == 1
                        %накапливание амплитуд с одного углового направления count раз
                        count = count + 1;
                        SIF = RP(jj,ii:ii+N-1)' + SIF;
                    end
                end
                
                %Получение квадратур сигнала с помощью Гильбертова преобразования. Для
                %этого необходимо оставить только половину остчетов после БПФ
                q = ifft(SIF/count);
                sif(jj,:) = fft(q(size(q,1)/2+1:size(q,1)));
            end
            
            empty = isnan(sif);         %обнаружение в массиве данных несущественных данных
            sif(empty) = 1E-15;         %сброс значений Nan в 0
            for ii = 1:size(sif,1)      %удаление постоянной составляющей из сигнала для каждого углового направления
                sif(ii,:) = sif(ii,:) - mean(sif,1);
            end
            
            %% Сохранение данных для построения РСА изображения
            save sardata sif; %для построения изображения
            toc
        end
    end
end

